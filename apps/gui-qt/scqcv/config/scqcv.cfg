# Defines the primary group of a module. This is the name of the group where a
# module sends its messages to if the target group is not explicitely given in
# the send call.
connection.primaryGroup = QC

# Defines a list of message groups to subscribe to. The default is usually
# given by the application and does not need to be changed.
connection.subscriptions = QC, CONFIG

# List of QC paramters to be displayed in the details table. Read the scqc
# documentation for a list of available QC parameters and the default
# configuration of scqcv $SEISCOMP_ROOT/etc/defaults/scqcv.cfg for more
# examples.
# Format: "Parameter name : ConfigName"
# Example: "delay : delay","spikes count : spike","spikes amplitude :
# spikeAmplitude" Refer to the parameters by their ConfigName to configure the
# attriutes.
parameter = "latency           : latency",\
            "delay             : delay",\
            "timing quality    : timing",\
            "offset            : offset",\
            "rms               : rms",\
            "gaps count        : gap",\
            "overlaps count    : overlap",\
            "availability      : availability",\
            "spikes count       : spike"
#            "gaps interval     : gapInterval",\
#            "gaps length       : gapLength",\
#            "spikes interval   : spikeInterval",\
#            "spikes amplitude  : spikeAmplitude"
#            "overlaps interval : overlapInterval",\
#            "overlaps length   : overlapLength"

# List of channels to display. By default the global binding configuration is
# used which can be overwritten with this parameter.
streams.codes = default

# Add new streams automatically to the streams configured in streams.codes when
# waveform QC parameters are provided for these streams.
streams.cumulative = false

# Length of data to be displayed.
streamWidget.length = 600

# Names of range profile to be considered. The range profiles define the
# background color table fields depending on the field value. Add the default
# ranges for which different intervals and the color are configured.
default.ranges = sane, bad

# Values are: int, float, percent, timeSpan
# Displays raw values if unset.
default.format = float

# Default time in seconds, how long a value is displayed in scqcv if no update
# is received. Setting to 0 means, show value until updated.
default.expire = 0

# A color defined by the color definitions below.
default.color = grey1

# Activate to display absolute values (modulus).
default.useAbsoluteValue = false

# Values are: int, float, percent, timeSpan
# Displays raw values if unset.
availability.format = percent

# Default time in seconds, how long a value is displayed in scqcv if no update
# is received. Setting to 0 means, show value until updated.
availability.expire = 600

# Value interval for range sane
availability.range.sane = 99.0, 101.0

# Contribution of this range for computing the score. The range must be
# considered.
availability.range.sane.count = 0

# Names of range profile to be considered The range profiles s define the
# background color table fields depending on the field value. Add the default
# ranges for which different intervals and the color are configured.
delay.ranges = sane, inter, bad

# Values are: int, float, percent, timeSpan
# Displays raw values if unset.
delay.format = timeSpan

# Value interval for range sane
delay.range.sane = 0.0, 60.0

# Value interval for range inter
delay.range.inter = 60, 120

# Contribution of this range for computing the score. The range must be
# considered.
delay.range.bad.count = -500

# A color defined by the color definitions below.
delay.range.bad.color = red

# Contribution of this range for computing the score. The range must be
# considered.
delay.range.inter.count = -1

# A color defined by the color definitions below.
delay.range.inter.color = yellow

# Contribution of this range for computing the score. The range must be
# considered.
delay.range.sane.count = 0

# A color defined by the color definitions below.
delay.range.sane.color = green

# Default time in seconds, how long a value is displayed in scqcv if no update
# is received. Setting to 0 means, show value until updated.
gap.expire = 600

# Value interval for range sane
gap.range.sane = 0.0, 0.0

# Contribution of this range for computing the score. The range must be
# considered.
gap.range.sane.count = 0

# Values are: int, float, percent, timeSpan
# Displays raw values if unset.
latency.format = timeSpan

# Value interval for range sane
latency.range.sane = 0.0, 600.0

# Contribution of this range for computing the score. The range must be
# considered.
latency.range.bad.count = -1000

# A color defined by the color definitions below.
latency.range.bad.color = grey

# Contribution of this range for computing the score. The range must be
# considered.
latency.range.sane.count = 0

# Activate to display absolute values (modulus).
offset.useAbsoluteValue = true

# Value interval for range sane
offset.range.sane = 0.0, 500.E3

# Contribution of this range for computing the score. The range must be
# considered.
offset.range.sane.count = 0

# Value interval for range sane
rms.range.sane = 10.0, 20.E3

# Contribution of this range for computing the score. The range must be
# considered.
rms.range.sane.count = 0

# A color defined by the color definitions below.
rms.range.sane.color = green

# Default time in seconds, how long a value is displayed in scqcv if no update
# is received. Setting to 0 means, show value until updated.
spike.expire = 600

# Value interval for range sane
spike.range.sane = 0.0, 0.0

# Contribution of this range for computing the score. The range must be
# considered.
spike.range.sane.count = 0

# Names of range profile to be considered The range profiles s define the
# background color table fields depending on the field value. Add the default
# ranges for which different intervals and the color are configured.
timing.ranges = sane, inter, bad

# Values are: int, float, percent, timeSpan
# Displays raw values if unset.
timing.format = int

# Activate to display absolute values (modulus).
timing.useAbsoluteValue = false

# Value interval for range sane
timing.range.sane = 90.0, 100.0

# Value interval for range inter
timing.range.inter = 50.0, 90.0

# Contribution of this range for computing the score. The range must be
# considered.
timing.range.bad.count = -100

# A color defined by the color definitions below.
timing.range.bad.color = darkred

# Contribution of this range for computing the score. The range must be
# considered.
timing.range.inter.count = -1

# A color defined by the color definitions below.
timing.range.inter.color = yellow

# Contribution of this range for computing the score. The range must be
# considered.
timing.range.sane.count = 0

# A color defined by the color definitions below.
timing.range.sane.color = green

#
range.bad = -99.9E99, 99.0E99

# Contribution of this range for computing the score. The range must be
# considered.
range.bad.count = -1

# A color defined by the color definitions below.
range.bad.color = red

# Contribution of this range for computing the score. The range must be
# considered.
range.inter.count = 0

# A color defined by the color definitions below.
range.inter.color = yellow

# Value interval for range sane
range.sane = 0.0, 99.0E99
# Contribution of this range for computing the score. The range must be
# considered.
range.sane.count = 0

# A color defined by the color definitions below.
range.sane.color = green

###############################################################################
# score values for overview window
# Ranges to be considered for forming the score. Set the count parameter from the
# respective range section for controlling the contribution of this range.
score.default.ranges = latency,\
                       delay,\
                       timing,\
                       below,\
                       r10,\
                       r09,\
                       r08,\
                       r07,\
                       r06,\
                       r05,\
                       r04,\
                       r03,\
                       r02,\
                       r01,\
                       above,\
                       unset

#
range.above = 0, 999

# A color defined by the color definitions below.
range.above.color = green

# Possible values: enableStream, disableStream
range.above.action = enableStream

#
range.below = -99, -11

# Contribution of this range for computing the score. The range must be
# considered.
range.below.count = 0

# A color defined by the color definitions below.
range.below.color = grey

# Possible values: enableStream, disableStream
range.below.action = disableStream

#
range.timing = -200, -100

# Contribution of this range for computing the score. The range must be
# considered.
range.timing.count = 0

# A color defined by the color definitions below.
range.timing.color = darkred

#
range.delay = -600, -500

# Contribution of this range for computing the score. The range must be
# considered.
range.delay.count = 0

# A color defined by the color definitions below.
range.delay.color = darkred

# define cumulative status ranges
range.latency = -1900, -1000

# Contribution of this range for computing the score. The range must be
# considered.
range.latency.count = 0

# A color defined by the color definitions below.
range.latency.color = grey

#
range.r01 = -1, -1

# Contribution of this range for computing the score. The range must be
# considered.
range.r01.count = 0

# A color defined by the color definitions below.
range.r01.color = red01

#
range.r02 = -2, -2

# Contribution of this range for computing the score. The range must be
# considered.
range.r02.count = 0

# A color defined by the color definitions below.
range.r02.color = red02

#
range.r03 = -3, -3

# Contribution of this range for computing the score. The range must be
# considered.
range.r03.count = 0

# A color defined by the color definitions below.
range.r03.color = red03

#
range.r04 = -4, -4

# Contribution of this range for computing the score. The range must be
# considered.
range.r04.count = 0

# A color defined by the color definitions below.
range.r04.color = red04

#
range.r05 = -5, -5

# Contribution of this range for computing the score. The range must be
# considered.
range.r05.count = 0

# A color defined by the color definitions below.
range.r05.color = red05

#
range.r06 = -6, -6

# Contribution of this range for computing the score. The range must be
# considered.
range.r06.count = 0

# A color defined by the color definitions below.
range.r06.color = red06

#
range.r07 = -7, -7

# Contribution of this range for computing the score. The range must be
# considered.
range.r07.count = 0

# A color defined by the color definitions below.
range.r07.color = red07

#
range.r08 = -8, -8

# Contribution of this range for computing the score. The range must be
# considered.
range.r08.count = 0

# A color defined by the color definitions below.
range.r08.color = red08

#
range.r09 = -9, -9

# Contribution of this range for computing the score. The range must be
# considered.
range.r09.count = 0

# A color defined by the color definitions below.
range.r09.color = red09

#
range.r10 = -10, -10

# Contribution of this range for computing the score. The range must be
# considered.
range.r10.count = 0

# A color defined by the color definitions below.
range.r10.color = red10

#
range.unset = 1000, 1000

# Contribution of this range for computing the score. The range must be
# considered.
range.unset.count = 0

# A color defined by the color definitions below.
range.unset.color = grey1


# R, G, B, alpha colors
color.red = 	255, 000, 000, 64
color.yellow = 	255, 255, 000, 64
color.green = 	000, 255, 000, 100
color.blue = 	000, 000, 255, 100
color.grey = 	130, 130, 130, 255
color.grey1 = 	240, 240, 240, 255
color.darkred = 255, 000, 000, 196
#
color.red10 = 	255, 000, 000, 255
color.red09 = 	255, 000, 000, 240
color.red08 = 	255, 000, 000, 220
color.red07 = 	255, 000, 000, 200
color.red06 = 	255, 000, 000, 175
color.red05 = 	255, 000, 000, 150
color.red04 = 	255, 000, 000, 125
color.red03 = 	255, 000, 000, 100
color.red02 = 	255, 000, 000, 85
color.red01 = 	255, 000, 000, 70

# valid formats are:
format.float = 2
